// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dictionary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DictionaryServiceClient is the client API for DictionaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictionaryServiceClient interface {
	// Client methods.
	Put(ctx context.Context, in *PutMessage, opts ...grpc.CallOption) (*SuccessMessage, error)
	Get(ctx context.Context, in *GetMessage, opts ...grpc.CallOption) (*ValueMessage, error)
	// Client and Replica methods.
	GetLeader(ctx context.Context, in *VoidMessage, opts ...grpc.CallOption) (*LeaderMessage, error)
	GetReplicas(ctx context.Context, in *VoidMessage, opts ...grpc.CallOption) (*ReplicaListMessage, error)
	// Replica methods.
	HeartBeat(ctx context.Context, in *VoidMessage, opts ...grpc.CallOption) (*VoidMessage, error)
	// Sub-replica methods.
	Join(ctx context.Context, in *IpMessage, opts ...grpc.CallOption) (*VoidMessage, error)
	// Leader-replica methods.
	SendReplicas(ctx context.Context, in *ReplicaListMessage, opts ...grpc.CallOption) (*VoidMessage, error)
	SendValue(ctx context.Context, in *PutMessage, opts ...grpc.CallOption) (*VoidMessage, error)
	SendValues(ctx context.Context, in *PutAllMessage, opts ...grpc.CallOption) (*VoidMessage, error)
}

type dictionaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDictionaryServiceClient(cc grpc.ClientConnInterface) DictionaryServiceClient {
	return &dictionaryServiceClient{cc}
}

func (c *dictionaryServiceClient) Put(ctx context.Context, in *PutMessage, opts ...grpc.CallOption) (*SuccessMessage, error) {
	out := new(SuccessMessage)
	err := c.cc.Invoke(ctx, "/dictionary.DictionaryService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) Get(ctx context.Context, in *GetMessage, opts ...grpc.CallOption) (*ValueMessage, error) {
	out := new(ValueMessage)
	err := c.cc.Invoke(ctx, "/dictionary.DictionaryService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) GetLeader(ctx context.Context, in *VoidMessage, opts ...grpc.CallOption) (*LeaderMessage, error) {
	out := new(LeaderMessage)
	err := c.cc.Invoke(ctx, "/dictionary.DictionaryService/GetLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) GetReplicas(ctx context.Context, in *VoidMessage, opts ...grpc.CallOption) (*ReplicaListMessage, error) {
	out := new(ReplicaListMessage)
	err := c.cc.Invoke(ctx, "/dictionary.DictionaryService/GetReplicas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) HeartBeat(ctx context.Context, in *VoidMessage, opts ...grpc.CallOption) (*VoidMessage, error) {
	out := new(VoidMessage)
	err := c.cc.Invoke(ctx, "/dictionary.DictionaryService/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) Join(ctx context.Context, in *IpMessage, opts ...grpc.CallOption) (*VoidMessage, error) {
	out := new(VoidMessage)
	err := c.cc.Invoke(ctx, "/dictionary.DictionaryService/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) SendReplicas(ctx context.Context, in *ReplicaListMessage, opts ...grpc.CallOption) (*VoidMessage, error) {
	out := new(VoidMessage)
	err := c.cc.Invoke(ctx, "/dictionary.DictionaryService/SendReplicas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) SendValue(ctx context.Context, in *PutMessage, opts ...grpc.CallOption) (*VoidMessage, error) {
	out := new(VoidMessage)
	err := c.cc.Invoke(ctx, "/dictionary.DictionaryService/SendValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) SendValues(ctx context.Context, in *PutAllMessage, opts ...grpc.CallOption) (*VoidMessage, error) {
	out := new(VoidMessage)
	err := c.cc.Invoke(ctx, "/dictionary.DictionaryService/SendValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictionaryServiceServer is the server API for DictionaryService service.
// All implementations must embed UnimplementedDictionaryServiceServer
// for forward compatibility
type DictionaryServiceServer interface {
	// Client methods.
	Put(context.Context, *PutMessage) (*SuccessMessage, error)
	Get(context.Context, *GetMessage) (*ValueMessage, error)
	// Client and Replica methods.
	GetLeader(context.Context, *VoidMessage) (*LeaderMessage, error)
	GetReplicas(context.Context, *VoidMessage) (*ReplicaListMessage, error)
	// Replica methods.
	HeartBeat(context.Context, *VoidMessage) (*VoidMessage, error)
	// Sub-replica methods.
	Join(context.Context, *IpMessage) (*VoidMessage, error)
	// Leader-replica methods.
	SendReplicas(context.Context, *ReplicaListMessage) (*VoidMessage, error)
	SendValue(context.Context, *PutMessage) (*VoidMessage, error)
	SendValues(context.Context, *PutAllMessage) (*VoidMessage, error)
	mustEmbedUnimplementedDictionaryServiceServer()
}

// UnimplementedDictionaryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDictionaryServiceServer struct {
}

func (UnimplementedDictionaryServiceServer) Put(context.Context, *PutMessage) (*SuccessMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedDictionaryServiceServer) Get(context.Context, *GetMessage) (*ValueMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDictionaryServiceServer) GetLeader(context.Context, *VoidMessage) (*LeaderMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}
func (UnimplementedDictionaryServiceServer) GetReplicas(context.Context, *VoidMessage) (*ReplicaListMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicas not implemented")
}
func (UnimplementedDictionaryServiceServer) HeartBeat(context.Context, *VoidMessage) (*VoidMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedDictionaryServiceServer) Join(context.Context, *IpMessage) (*VoidMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedDictionaryServiceServer) SendReplicas(context.Context, *ReplicaListMessage) (*VoidMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReplicas not implemented")
}
func (UnimplementedDictionaryServiceServer) SendValue(context.Context, *PutMessage) (*VoidMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendValue not implemented")
}
func (UnimplementedDictionaryServiceServer) SendValues(context.Context, *PutAllMessage) (*VoidMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendValues not implemented")
}
func (UnimplementedDictionaryServiceServer) mustEmbedUnimplementedDictionaryServiceServer() {}

// UnsafeDictionaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictionaryServiceServer will
// result in compilation errors.
type UnsafeDictionaryServiceServer interface {
	mustEmbedUnimplementedDictionaryServiceServer()
}

func RegisterDictionaryServiceServer(s grpc.ServiceRegistrar, srv DictionaryServiceServer) {
	s.RegisterService(&DictionaryService_ServiceDesc, srv)
}

func _DictionaryService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictionary.DictionaryService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).Put(ctx, req.(*PutMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictionary.DictionaryService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).Get(ctx, req.(*GetMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictionary.DictionaryService/GetLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).GetLeader(ctx, req.(*VoidMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_GetReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).GetReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictionary.DictionaryService/GetReplicas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).GetReplicas(ctx, req.(*VoidMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictionary.DictionaryService/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).HeartBeat(ctx, req.(*VoidMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictionary.DictionaryService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).Join(ctx, req.(*IpMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_SendReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaListMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).SendReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictionary.DictionaryService/SendReplicas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).SendReplicas(ctx, req.(*ReplicaListMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_SendValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).SendValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictionary.DictionaryService/SendValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).SendValue(ctx, req.(*PutMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_SendValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutAllMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).SendValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictionary.DictionaryService/SendValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).SendValues(ctx, req.(*PutAllMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// DictionaryService_ServiceDesc is the grpc.ServiceDesc for DictionaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictionaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dictionary.DictionaryService",
	HandlerType: (*DictionaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _DictionaryService_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DictionaryService_Get_Handler,
		},
		{
			MethodName: "GetLeader",
			Handler:    _DictionaryService_GetLeader_Handler,
		},
		{
			MethodName: "GetReplicas",
			Handler:    _DictionaryService_GetReplicas_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _DictionaryService_HeartBeat_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _DictionaryService_Join_Handler,
		},
		{
			MethodName: "SendReplicas",
			Handler:    _DictionaryService_SendReplicas_Handler,
		},
		{
			MethodName: "SendValue",
			Handler:    _DictionaryService_SendValue_Handler,
		},
		{
			MethodName: "SendValues",
			Handler:    _DictionaryService_SendValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Dictionary/dictionary.proto",
}
